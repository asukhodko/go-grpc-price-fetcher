// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pricefetcher

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// PriceFetcherClient is the client API for PriceFetcher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PriceFetcherClient interface {
	Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*FetchResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
}

type priceFetcherClient struct {
	cc grpc.ClientConnInterface
}

func NewPriceFetcherClient(cc grpc.ClientConnInterface) PriceFetcherClient {
	return &priceFetcherClient{cc}
}

func (c *priceFetcherClient) Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*FetchResponse, error) {
	out := new(FetchResponse)
	err := c.cc.Invoke(ctx, "/pricefetcher.PriceFetcher/Fetch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *priceFetcherClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/pricefetcher.PriceFetcher/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PriceFetcherServer is the server API for PriceFetcher service.
// All implementations must embed UnimplementedPriceFetcherServer
// for forward compatibility
type PriceFetcherServer interface {
	Fetch(context.Context, *FetchRequest) (*FetchResponse, error)
	List(context.Context, *ListRequest) (*ListResponse, error)
	mustEmbedUnimplementedPriceFetcherServer()
}

// UnimplementedPriceFetcherServer must be embedded to have forward compatible implementations.
type UnimplementedPriceFetcherServer struct {
}

func (UnimplementedPriceFetcherServer) Fetch(context.Context, *FetchRequest) (*FetchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}
func (UnimplementedPriceFetcherServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedPriceFetcherServer) mustEmbedUnimplementedPriceFetcherServer() {}

// UnsafePriceFetcherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PriceFetcherServer will
// result in compilation errors.
type UnsafePriceFetcherServer interface {
	mustEmbedUnimplementedPriceFetcherServer()
}

func RegisterPriceFetcherServer(s grpc.ServiceRegistrar, srv PriceFetcherServer) {
	s.RegisterService(&_PriceFetcher_serviceDesc, srv)
}

func _PriceFetcher_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PriceFetcherServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pricefetcher.PriceFetcher/Fetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PriceFetcherServer).Fetch(ctx, req.(*FetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PriceFetcher_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PriceFetcherServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pricefetcher.PriceFetcher/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PriceFetcherServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PriceFetcher_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pricefetcher.PriceFetcher",
	HandlerType: (*PriceFetcherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Fetch",
			Handler:    _PriceFetcher_Fetch_Handler,
		},
		{
			MethodName: "List",
			Handler:    _PriceFetcher_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pricefetcher.proto",
}
